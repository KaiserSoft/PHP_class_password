<?PHP class password{ var $time_hash;var $hash_rounds;var $hash_type;var $hash_supported;function __construct(){ $this->hash_type='sha512';$this->hash_supported='sha256|sha512|md5';$this->hash_rounds['sha256']=(int)'10000';$this->hash_rounds['sha512']=(int)'10000';$this->hash_rounds['md5']=(int)'6000';} function hash( &$string,$pass_the_salt=null,$use_crypt=true) { $hash=null;if( function_exists('crypt')===true && (CRYPT_BLOWFISH===1 || CRYPT_SHA512===1 || CRYPT_SHA256==1) && $use_crypt===true ) { switch($this->hash_type) { case 'sha256':if( $pass_the_salt===null ) $salt=$this->rand_string(16,array('A','Z','a','z',0,9),'.,/');else $salt=$pass_the_salt;$length=$this->get_hash_length('sha256');if( $length===false ) break;$hash=crypt($string,'$5$'."rounds={$this->hash_rounds['sha256']}".'$'.$salt.'$');if( strlen($hash)===$length ) return $hash;break;case 'sha512':if( $pass_the_salt===null ) $salt=$this->rand_string(16,array('A','Z','a','z',0,9),'.,/');else $salt=$pass_the_salt;$length=$this->get_hash_length('sha512');if( $length===false ) break;$hash=crypt($string,'$6$'."rounds={$this->hash_rounds['sha512']}".'$'.$salt.'$');if( strlen($hash)===$length ) return $hash;break;} }else $salt=null;if( $pass_the_salt===null ) { $rand=$this->rand_string(20,array('A','Z','a','z',0,9),'`,~,!,@,#,%,^,&,*,(,),_,|,+,=,-');$salt=md5(microtime(true).$rand);}else $salt=$pass_the_salt;$length=$this->get_hash_length('md5');$hash=$string;if( $length===false ) break;for( $x=0;$x < $this->hash_rounds['md5'];++$x) { $hash=md5($salt.md5($salt.$hash).md5($hash.$salt));} $hash='$CL$'.$this->hash_rounds['md5'].'$'.$salt.'$'.$hash;if( strlen($hash)===$length ) return $hash;return false;} function validate( &$hash,&$password ) { $new_hash=$this->re_hash( $hash,$password);if( $hash===$new_hash && $new_hash !==false ) return true;else return false;} function re_hash( &$hash,&$password ) { $check_hash=explode('$',$hash);if( isset($check_hash[1]) !==true ) return false;if( isset($check_hash[2]) !==true ) return false;if( isset($check_hash[3]) !==true ) return false;if( $check_hash[1]=='5' ) { $length=$this->get_hash_length('sha256');if( CRYPT_SHA256===1 && strlen($hash)===$length && function_exists('crypt')===true ) { $salt=substr($check_hash[3],0,16);$ret=crypt($password,'$5$'.$check_hash[2].'$'.$salt);if( strlen($ret)===$length && $ret !==false ) return $ret;}else die('This server does not support sha256 and can not verify the hash: '.$hash);} if( $check_hash[1]=='6' ) { $length=$this->get_hash_length('sha512');if( CRYPT_SHA512===1 && strlen($hash)===$length && function_exists('crypt')===true ) { $salt=substr($check_hash[3],0,16);$ret=crypt($password,'$6$'.$check_hash[2].'$'.$salt);if( strlen($ret)===$length && $ret !==false ) return $ret;}else die('This server does not support sha512 and can not verify the hash: '.$hash);} $length=$this->get_hash_length('md5');if( $check_hash[1]=='CL' && strlen($hash)===$length ) { $ret=$this->hash($password,$check_hash[3],false);if( strlen($ret)===$length && $ret !==false ) return $ret;} return false;} function set_hash_rounds( $type,$rounds ){ if( $this->is_name_valid($type) !==true ) return false;if( is_int($rounds)===true && $rounds > 0 ){ $this->hash_rounds[$type]=$rounds;return true;} return false;} function set_hash_type( $type ){ if( $this->is_name_valid($type) !==true ) return false;$this->hash_type=$type;return true;} private function get_hash_length( $type ) { $doloop=false;if( $this->is_name_valid($type) !==true ) return false;if( $type==='sha512' || $type==='sha256' ) { if( $this->hash_rounds[$type] < 1000 ) $this->hash_rounds[$type]=1000;if( $this->hash_rounds[$type] > 999999999 ) $this->hash_rounds[$type]=999999999;$doloop=true;$plus=($type==='sha512' ) ? 117:74;}elseif( $type==='md5' ){ if( $this->hash_rounds[$type] < 1000 ) $this->hash_rounds[$type]=1000;if( $this->hash_rounds[$type] > 999999999 ) $this->hash_rounds[$type]=999999999;$doloop=true;$plus=73;}else return false;$length=0;$divby=1000;while( $doloop===true ) { ++$length;if( floor($this->hash_rounds[$type]/$divby) < 10 ) return (int)$length+$plus;$divby *=10;} return false;} private function is_name_valid( &$name ) { $name=strtolower($name);$tmp=explode('|',$this->hash_supported);foreach( $tmp as $hash ) { if( $name===$hash ) return true;} return false;} function rand_string($lenth,$range=array('A','Z','a','z',0,9),$other='' ) { $cnt=count($range);$sel_range=array();for( $x=0;$x < $cnt;$x=$x+2 ) $sel_range=array_merge($sel_range,range($range[$x],$range[$x+1]));if( $other !=='' ) $sel_range=array_merge($sel_range,explode (',',$other));$out='';$cnt=count($sel_range);for( $x=0;$x < $lenth;++$x ) $out.=$sel_range[mt_rand(0,$cnt-1)];return $out;} } ?>